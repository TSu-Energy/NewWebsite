---
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import type { Item } from '~/types';
import Image from '~/components/common/Image.astro';
import Button from '~/react-components/Button';
import '~/assets/styles/RollingViews.css';

import React from 'react';
// import ScrollableComponent from '~/react-components/ScrollableComponent';

export interface Props {
  items?: Array<Item>;
  defaultIcon?: string;
  classes?: Record<string, string>;
}

const { items = [], classes = {}, defaultIcon } = Astro.props as Props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  date: dateClass = '',
  description: descriptionClass = '',
  image:
    imageClass = 'relative h-0 pb-[56.25%] md:pb-[75%] md:h-72 lg:pb-[56.25%] overflow-hidden bg-gray-400 dark:bg-slate-700 rounded shadow-lg',
  icon: defaultIconClass = 'text-primary dark:text-slate-200 border-primary dark:border-blue-700',
} = classes;
---

<div class="scroll-container">
  {
    items && items.length && (
      <div>
        {/* <p>
        <Button client:load>Hello 十条</Button>
      </p> */}
        {items.map(({ title, date, description, icon, classes: itemClasses = {}, image }, index = 0) => (
          // <div class={twMerge('flex', panelClass, itemClasses?.panel)}>
          <div class={twMerge('flex', containerClass)}>
            <div class="flex flex-col items-center mr-4 rtl:mr-0 rtl:ml-4">
              <div class="flex">
                {(icon || defaultIcon) && (
                  <Icon
                    name={icon || defaultIcon}
                    class={twMerge('w-10 h-10 p-2 rounded-full border-2', defaultIconClass, itemClasses?.icon)}
                  />
                )}
              </div>
              {index !== items.length - 1 && <div class="w-px h-full bg-black/10 dark:bg-slate-400/50" />}
            </div>
            <div class={twMerge('max-w-screen-xl box-border grid md:grid-cols-2', panelClass, itemClasses?.panel)}>
              <div>
                {title && (
                  <p
                    class={twMerge('text-primary text-xl font-bold', titleClass, itemClasses?.title)}
                    set:html={title}
                  />
                )}
                {date && (
                  <p
                    class={twMerge('text-secondary text-xl font-bold', dateClass, itemClasses?.date)}
                    set:html={date}
                  />
                )}
                {description && (
                  <p
                    class={twMerge('text-muted mt-2', descriptionClass, itemClasses?.description)}
                    set:html={description}
                  />
                )}
              </div>

              {image && (
                <a class="relative md:basis-1/2">
                  <div class={twMerge(imageClass)}>
                    {typeof image === 'string' ? (
                      <Fragment set:html={image} />
                    ) : (
                      <Image
                        class="inset-0 object-cover object-top w-full rounded-md shadow-lg md:absolute md:h-full bg-gray-400 dark:bg-slate-700"
                        widths={[400, 768]}
                        sizes="(max-width: 768px) 100vw, 432px"
                        width={609}
                        height={360}
                        layout="cover"
                        src={image?.src}
                        alt={image?.alt}
                        aspectRatio="16:9"
                        loading="lazy"
                        decoding="async"
                      />
                    )}
                  </div>
                </a>
              )}
            </div>
          </div>
        ))}
      </div>
    )
  }
</div>
