---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
// import Timeline from '~/components/ui/Timeline.astro';
import Headline from '~/components/ui/Headline.astro';
// import Image from '~/components/common/Image.astro';
// import type { Steps as Props } from '~/types';
import Item from '../blog/GridItem2.astro';
import '~/assets/styles/RollingViews.css';
// import ScrollableComponent from '~/react-components/ScrollableComponent';
import { APP_BLOG } from 'astrowind:config';
import { findLatestPosts } from '~/utils/blog';

const count = 6;
const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  // items = [],
  //   image = await Astro.slots.render('image'),
  isReversed = false,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

const posts = APP_BLOG.isEnabled ? await findLatestPosts({ count }) : [];
---

{
  APP_BLOG.isEnabled ? (
    <WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl p-4 ${classes?.container ?? ''}`} bg={bg}>
      <div class:list={['flex flex-col gap-8 md:gap-12', { 'md:flex-row-reverse': isReversed }, 'md:flex-row']}>
        <div class:list={['md:p-4 md:self-center md:m-2', 'md:full', 'w-full']}>
          <Headline
            title={title}
            subtitle={subtitle}
            tagline={tagline}
            classes={{
              // container: 'text-left rtl:text-right',
              // title: 'text-3xl lg:text-4xl',
              ...((classes?.headline as object) ?? {}),
            }}
          />
          {/* <!-- <div>
            <h1 class="text-4xl font-bold">Scrollable Component</h1>
            <ScrollableComponent items={items} client:load />
          </div> --> */}
          {/* <Timeline2
            items={items}
            classes={{
              container: 'max-w-md mx-auto md:max-w-none grid gap-6 md:gap-8 grid grid-flow-col auto-cols-max',
              panel: 'panel',
              ...(classes?.items as Record<string, never>),
            }}
          /> */}
          <div class="scroll-container">
            {posts.map((post) => (
                <Item
                  post={post}
                  classes={{
                    container: 'max-w-md mx-auto md:max-w-none grid gap-6 md:gap-8 grid grid-flow-col auto-cols-max',
                    panel: 'panel'
                  }}
                />
            ))}
          </div>
        </div>
      </div>
    </WidgetWrapper>
  ) : (
    <Fragment />
  )
}
