---
import type { Stats as Props } from '~/types';
import WidgetWrapper from '../ui/WidgetWrapper.astro';
import Headline from '../ui/Headline.astro';
import { Icon } from 'astro-icon/components';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  stats = [],
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

console.log('Original stats data:', stats);
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />
  <div class="flex flex-wrap justify-center -m-4 text-center">
    {
      stats &&
        stats.map(({ amount, title, unit, icon, id }) => (
          <div
            class="md:w-1/4 sm:w-1/2 w-full min-w-[220px] text-center md:border-r md:last:border-none dark:md:border-slate-500"
            key={id}
          >
            {icon && (
              <div class="flex items-center justify-center mx-auto mb-4 text-primary">
                <Icon name={icon} class="w-10 h-10" />
              </div>
            )}
            {amount && (
              <div class="font-heading text-primary text-[2.6rem] font-bold dark:text-white lg:text-5xl xl:text-6xl">
                <p id={id}>
                  {amount}
                  {unit}
                </p>
              </div>
            )}
            {title && (
              <div class="text-sm font-medium uppercase tracking-widest text-gray-800 dark:text-slate-400 lg:text-base">
                {title}
              </div>
            )}
          </div>
        ))
    }
  </div>
</WidgetWrapper>

<script define:vars={{ stats }}>
  function incrementCounter(selector, current, target, duration, letter = '') {
    const counter = document.getElementById(selector);
    const stepTime = Math.abs(Math.floor(duration / target));
    if (current < target && counter) {
      current++;
      counter.innerText = current.toString() + letter;
      setTimeout(() => incrementCounter(selector, current, target, duration, letter), stepTime);
    }
  }

  // for (let i = 0; i < stats.length; i++) {
  //   let ID = stats[i].id || '';
  //   // let num = typeof stats[i].amount === 'number' && stats[i].amount !== undefined ? stats[i].amount : 0;
  //   let num = Number(stats[i].amount) || 0;
  //   incrementCounter(ID, 0, num, 1000, stats[i].unit || '');
  // }

  document.addEventListener('DOMContentLoaded', () => {
    for (let i = 0; i < stats.length; i++) {
      const ID = stats[i].id || '';
      const num = Number(stats[i].amount) || 0;
      incrementCounter(ID, 0, num, 1000, stats[i].unit || '');
    }
  });
</script>
